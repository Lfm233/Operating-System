2.模块设计与实现
要求：
1、建立模型：根据任务书要求，利用《操作系统》课程中所介绍的各种处理机管理、存储器管理、I/O设备管理和文件管理建立具体问题的抽象模型。

2、构造算法：通过利用和改造现有算法，针对计算机相关领域复杂工程问题的特定需求，设计问题的实现算法。

3、选择、设计数据结构：选择合适的数据结构组织和存储数据。

4、程序编写：用计算机语言来描述算法和数据结构，并将其转换为完整的程序。

5、程序调试和测试：应用调试工具，设计测试数据，对程序自底向上、分模块调试。调试正确后，整理源程序和注释，形成格式和风格良好的源程序清单和结果。

6、结果分析：程序运行结果分析包括正确的输入及其输出结果、含有错误的输入和输出结果。

按照四个模块逐一展开，具体包括：

2.1 进程管理模块

2.1.1 设计目标：实现多进程调度，支持时间片轮转调度和优先级调度。

2.1.2 设计原理：对时间片轮转和优先级调度算法的简要描述。

2.1.3 编写过程：

自己如何理解调度算法。

遇到的问题（例如队列更新、排序逻辑的疏忽）。

如何解决这些问题（如动态更新进程队列）。

2.1.4 测试与结果：

列出输入数据（如进程信息表）和输出（进程完成时间等）。

分析两种调度算法的优缺点。

2.2 内存管理模块

2.2.1 设计目标：实现固定分区和可变分区的内存分配、释放及状态显示。

2.2.2 设计原理：内存分区管理的基本算法及关键点（如碎片问题的解决）。

2.2.3 编写过程：

从基础功能开始实现（固定分区）。

在可变分区中如何处理分区合并。

查阅资料和改进代码的经历。

2.2.4 测试与结果：

列出测试用例（不同大小的进程分配和释放）。

展示内存分配和释放的状态表格。

2.3 虚拟存储器管理模块

2.3.1 设计目标：实现FIFO、LRU、LFU三种页面调度算法。

2.3.2 设计原理：三种算法的基本原理和适用场景。

2.3.3 编写过程：

初次实现的困惑（如频率统计的逻辑）。

引入优化方案（如使用哈希表和最小堆）。

调试过程中对虚拟内存运行机制的进一步理解。

2.3.4 测试与结果：

列出页面序列输入和调度过程的页面缺失情况。

对比不同算法的页面缺失次数。

2.4 文件管理模块

2.4.1 设计目标：实现FCFS、SSTF、SCAN三种磁盘调度算法。

2.4.2 设计原理：描述磁盘调度算法的逻辑和核心实现。

2.4.3 编写过程：

如何用C++实现磁盘请求的排序和调度。

优化磁头移动逻辑的思路。

遇到的问题和解决方案。

2.4.4 测试与结果：

提供磁道请求输入和调度后的结果（如磁头移动总距离）。

分析三种算法的性能和适用场景。